/**
* Method is sued for sorted insert into Linked List
*
**/

public void sortedInsert(Node head, int temp) {
  Node newNode = new Node(temp);
  // Check first if head is null i.e empty list. Then just insert and return.  
  // To optimize code have this as the first check.
  if(head == null) {
     head = newNode;
     return;
  }

  // Track the previous & current pointer
  // Insert is going to take place between the prev & current pointer
  // i.e when inserting 7 in a list 2-> 5 -> 9 ->11 prev would point to 5 & current to 9.
  Node current = head;
  Node prev = null;
 
 // Keep looping till you either 1> run out of the nodes or
 // 2> value of the current node is greater than the node value to be inserted 
  while( (current != null) && (temp >= current.getData()) ) {
    prev = current;
    current = current.getNextNode();
  }
  
  // case when the node to be inserted is the last node.
  if(current == null) {
    prev.setNextNode(newNode);
  } else {
    newNode.setNextNode(current);
  }
}
